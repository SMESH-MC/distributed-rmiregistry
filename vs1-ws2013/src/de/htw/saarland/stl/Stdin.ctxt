#BlueJ class context
comment0.params=
comment0.target=float\ readFloat()
comment0.text=\r\n\ <UL>\r\n\ <LI>\ liest\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ float-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ bleibt\ hinter\ den\ eingelesenen\ Zeichen\ in\ der\r\n\ aktuellen\ Zeile\ stehen.\r\n\ </UL>\r\n\ \r\n\ @return\ die\ eingelesene\ Float-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
comment1.params=prompt
comment1.target=float\ readFloat(java.lang.String)
comment1.text=\r\n\ <UL>\r\n\ <LI>\ gibt\ den\ Eingabe-Aufforderungs-String\ <CODE>prompt</CODE>\ aus\ und\r\n\ liest\ danach\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ float-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ bleibt\ hinter\ den\ eingelesenen\ Zeichen\ in\ der\r\n\ aktuellen\ Zeile\ stehen.\r\n\ </UL>\r\n\ \r\n\ @param\ prompt\r\n\ \ \ \ \ \ \ \ \ \ \ \ ist\ der\ Eingabe-Aufforderungs-String\r\n\ @return\ die\ eingelesene\ Float-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
comment10.params=
comment10.target=byte\ readlnByte()
comment10.text=\r\n\ <UL>\r\n\ <LI>\ liest\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ byte-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ wird\ hinter\ das\ EOLN\ der\ aktuellen\ Zeile\ gestellt,\r\n\ d.h.\ der\ Rest\ der\ Eingabezeile\ wird\ ueberlesen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @return\ die\ eingelesene\ Byte-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
comment11.params=prompt
comment11.target=byte\ readlnByte(java.lang.String)
comment11.text=\r\n\ <UL>\r\n\ <LI>\ gibt\ den\ Eingabe-Aufforderungs-String\ <CODE>prompt</CODE>\ aus\ und\r\n\ liest\ danach\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ byte-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ bleibt\ hinter\ den\ eingelesenen\ Zeichen\ in\ der\r\n\ aktuellen\ Zeile\ stehen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @param\ prompt\r\n\ \ \ \ \ \ \ \ \ \ \ \ ist\ der\ Eingabe-Aufforderungs-String\r\n\ @return\ die\ eingelesene\ Byte-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n\ \r\n
comment12.params=
comment12.target=short\ readShort()
comment12.text=\r\n\ <UL>\r\n\ <LI>\ liest\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ short-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ bleibt\ hinter\ den\ eingelesenen\ Zeichen\ in\ der\r\n\ aktuellen\ Zeile\ stehen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @return\ die\ eingelesene\ Short-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
comment13.params=prompt
comment13.target=short\ readShort(java.lang.String)
comment13.text=\r\n\ <UL>\r\n\ <LI>\ gibt\ den\ Eingabe-Aufforderungs-String\ <CODE>prompt</CODE>\ aus\ und\r\n\ liest\ danach\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ short-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ bleibt\ hinter\ den\ eingelesenen\ Zeichen\ in\ der\r\n\ aktuellen\ Zeile\ stehen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @param\ prompt\r\n\ \ \ \ \ \ \ \ \ \ \ \ ist\ der\ Eingabe-Aufforderungs-String\r\n\ @return\ die\ eingelesene\ Short-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
comment14.params=
comment14.target=short\ readlnShort()
comment14.text=\r\n\ <UL>\r\n\ <LI>\ liest\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ short-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ wird\ hinter\ das\ EOLN\ der\ aktuellen\ Zeile\ gestellt,\r\n\ d.h.\ der\ Rest\ der\ Eingabezeile\ wird\ ueberlesen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @return\ die\ eingelesene\ Short-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
comment15.params=prompt
comment15.target=short\ readlnShort(java.lang.String)
comment15.text=\r\n\ <UL>\r\n\ <LI>\ gibt\ den\ Eingabe-Aufforderungs-String\ <CODE>prompt</CODE>\ aus\ und\r\n\ liest\ danach\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ short-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ wird\ hinter\ das\ EOLN\ der\ aktuellen\ Zeile\ gestellt,\r\n\ d.h.\ der\ Rest\ der\ Eingabezeile\ wird\ ueberlesen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @param\ prompt\r\n\ \ \ \ \ \ \ \ \ \ \ \ ist\ der\ Eingabe-Aufforderungs-String\r\n\ @return\ die\ eingelesene\ Short-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
comment16.params=
comment16.target=int\ readInt()
comment16.text=\r\n\ <UL>\r\n\ <LI>\ liest\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ int-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ bleibt\ hinter\ den\ eingelesenen\ Zeichen\ in\ der\r\n\ aktuellen\ Zeile\ stehen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @return\ die\ eingelesene\ Int-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
comment17.params=prompt
comment17.target=int\ readInt(java.lang.String)
comment17.text=\r\n\ <UL>\r\n\ <LI>\ gibt\ den\ Eingabe-Aufforderungs-String\ <CODE>prompt</CODE>\ aus\ und\r\n\ liest\ danach\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ int-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ bleibt\ hinter\ den\ eingelesenen\ Zeichen\ in\ der\r\n\ aktuellen\ Zeile\ stehen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @param\ prompt\r\n\ \ \ \ \ \ \ \ \ \ \ \ ist\ der\ Eingabe-Aufforderungs-String\r\n\ @return\ die\ eingelesene\ Int-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
comment18.params=
comment18.target=int\ readlnInt()
comment18.text=\r\n\ <UL>\r\n\ <LI>\ liest\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ int-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ wird\ hinter\ das\ EOLN\ der\ aktuellen\ Zeile\ gestellt,\r\n\ d.h.\ der\ Rest\ der\ Eingabezeile\ wird\ ueberlesen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @return\ die\ eingelesene\ Int-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
comment19.params=prompt
comment19.target=int\ readlnInt(java.lang.String)
comment19.text=\r\n\ <UL>\r\n\ <LI>\ gibt\ den\ Eingabe-Aufforderungs-String\ <CODE>prompt</CODE>\ aus\ und\r\n\ liest\ danach\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ int-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ wird\ hinter\ das\ EOLN\ der\ aktuellen\ Zeile\ gestellt,\r\n\ d.h.\ der\ Rest\ der\ Eingabezeile\ wird\ ueberlesen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @param\ prompt\r\n\ \ \ \ \ \ \ \ \ \ \ \ ist\ der\ Eingabe-Aufforderungs-String\r\n\ @return\ die\ eingelesene\ Int-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
comment2.params=
comment2.target=float\ readlnFloat()
comment2.text=\r\n\ <UL>\r\n\ <LI>\ liest\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ float-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ wird\ hinter\ das\ EOLN\ der\ aktuellen\ Zeile\ gestellt,\r\n\ d.h.\ der\ Rest\ der\ Eingabezeile\ wird\ ueberlesen.\r\n\ </UL>\r\n\ \r\n\ @return\ die\ eingelesene\ Float-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
comment20.params=
comment20.target=long\ readLong()
comment20.text=\r\n\ <UL>\r\n\ <LI>\ liest\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ long-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ bleibt\ hinter\ den\ eingelesenen\ Zeichen\ in\ der\r\n\ aktuellen\ Zeile\ stehen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @return\ die\ eingelesene\ Long-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
comment21.params=prompt
comment21.target=long\ readLong(java.lang.String)
comment21.text=\r\n\ <UL>\r\n\ <LI>\ gibt\ den\ Eingabe-Aufforderungs-String\ <CODE>prompt</CODE>\ aus\ und\r\n\ liest\ danach\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ long-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ bleibt\ hinter\ den\ eingelesenen\ Zeichen\ in\ der\r\n\ aktuellen\ Zeile\ stehen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @param\ prompt\r\n\ \ \ \ \ \ \ \ \ \ \ \ ist\ der\ Eingabe-Aufforderungs-String\r\n\ @return\ die\ eingelesene\ Long-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ auss\ erhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
comment22.params=
comment22.target=long\ readlnLong()
comment22.text=\r\n\ <UL>\r\n\ <LI>\ liest\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ long-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ wird\ hinter\ das\ EOLN\ der\ aktuellen\ Zeile\ gestellt,\r\n\ d.h.\ der\ Rest\ der\ Eingabezeile\ wird\ ueberlesen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @return\ die\ eingelesene\ Long-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
comment23.params=prompt
comment23.target=long\ readlnLong(java.lang.String)
comment23.text=\r\n\ <UL>\r\n\ <LI>\ gibt\ den\ Eingabe-Aufforderungs-String\ <CODE>prompt</CODE>\ aus\ und\r\n\ liest\ danach\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ long-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ wird\ hinter\ das\ EOLN\ der\ aktuellen\ Zeile\ gestellt,\r\n\ d.h.\ der\ Rest\ der\ Eingabezeile\ wird\ ueberlesen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @param\ prompt\r\n\ \ \ \ \ \ \ \ \ \ \ \ ist\ der\ Eingabe-Aufforderungs-String\r\n\ @return\ die\ eingelesene\ Long-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
comment24.params=
comment24.target=java.lang.String\ readString()
comment24.text=\r\n\ <UL>\r\n\ <LI>\ liest\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ bleibt\ hinter\ den\ eingelesenen\ Zeichen\ in\ der\r\n\ aktuellen\ Zeile\ stehen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @return\ den\ eingelesenen\ String\r\n
comment25.params=prompt
comment25.target=java.lang.String\ readString(java.lang.String)
comment25.text=\r\n\ <UL>\r\n\ <LI>\ gibt\ den\ Eingabe-Aufforderungs-String\ <CODE>prompt</CODE>\ aus\ und\r\n\ liest\ danach\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ bleibt\ hinter\ den\ eingelesenen\ Zeichen\ in\ der\r\n\ aktuellen\ Zeile\ stehen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @param\ prompt\r\n\ \ \ \ \ \ \ \ \ \ \ \ ist\ der\ Eingabe-Aufforderungs-String\r\n\ @return\ den\ eingelesenen\ String\r\n
comment26.params=
comment26.target=java.lang.String\ readlnString()
comment26.text=\r\n\ <UL>\r\n\ <LI>\ liest\ eine\ komplette\ Zeile\ von\ der\ Standardeingabe\ ein.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ wird\ hinter\ das\ EOLN\ der\ aktuellen\ Zeile\ gestellt.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @return\ den\ eingelesenen\ String\r\n
comment27.params=prompt
comment27.target=java.lang.String\ readlnString(java.lang.String)
comment27.text=\r\n\ <UL>\r\n\ <LI>\ gibt\ den\ Eingabe-Aufforderungs-String\ <CODE>prompt</CODE>\ aus\ und\r\n\ liest\ danach\ eine\ komplette\ Zeile\ von\ der\ Standardeingabe\ ein.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ wird\ hinter\ das\ EOLN\ der\ aktuellen\ Zeile\ gestellt.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @param\ prompt\r\n\ \ \ \ \ \ \ \ \ \ \ \ ist\ der\ Eingabe-Aufforderungs-String\r\n\ @return\ den\ eingelesenen\ String\r\n
comment28.params=
comment28.target=boolean\ readBoolean()
comment28.text=\r\n\ <UL>\r\n\ <LI>\ liest\ einen\ von\ white-spaces\ begrenzten\ String,\ der\ die\r\n\ Zeichenfolgen\ "true,\ True,\ T,\ t,\ false,\ False,\ F,\ f"\ enthalten\ darf\ von\r\n\ der\ Standardeingabe\ ein.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ bleibt\ hinter\ den\ eingelesenen\ Zeichen\ in\ der\r\n\ aktuellen\ Zeile\ stehen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @return\ den\ eingelesenen\ Boolean-Wert\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEIN\ Booleanwert\ wir\ True\ ||\ true\ ||\ T\ ||\ t\ ||\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ False\ ||\ false\ ||\ F\ ||\ f\ ist.\r\n
comment29.params=prompt
comment29.target=boolean\ readBoolean(java.lang.String)
comment29.text=\r\n\ <UL>\r\n\ <LI>\ gibt\ den\ Eingabe-Aufforderungs-String\ <CODE>prompt</CODE>\ aus\ und\r\n\ liest\ danach\ einen\ von\ white-spaces\ begrenzten\ String,\ der\ die\r\n\ Zeichenfolgen\ "true,\ True,\ T,\ t,\ false,\ False,\ F,\ f"\ enthalten\ darf\ von\r\n\ der\ Standardeingabe\ ein.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ bleibt\ hinter\ den\ eingelesenen\ Zeichen\ in\ der\r\n\ aktuellen\ Zeile\ stehen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @param\ prompt\r\n\ \ \ \ \ \ \ \ \ \ \ \ ist\ der\ Eingabe-Aufforderungs-String\r\n\ @return\ den\ eingelesenen\ Boolean-Wert\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEIN\ Booleanwert\ wir\ True||\ true\ ||\ T\ ||\ t\ ||\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ False\ ||\ false\ ||\ F\ ||\ f\ ist.\r\n
comment3.params=prompt
comment3.target=float\ readlnFloat(java.lang.String)
comment3.text=\r\n\ <UL>\r\n\ <LI>\ gibt\ den\ Eingabe-Aufforderungs-String\ <CODE>prompt</CODE>\ aus\ und\r\n\ liest\ danach\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ float-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ wird\ hinter\ das\ EOLN\ der\ aktuellen\ Zeile\ gestellt,\r\n\ d.h.\ der\ Rest\ der\ Eingabezeile\ wird\ ueberlesen.\r\n\ </UL>\r\n\ \r\n\ @param\ prompt\r\n\ \ \ \ \ \ \ \ \ \ \ \ ist\ der\ Eingabe-Aufforderungs-String\r\n\ @return\ die\ eingelesene\ Float-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
comment30.params=
comment30.target=boolean\ readlnBoolean()
comment30.text=\r\n\ <UL>\r\n\ <LI>\ liest\ einen\ von\ white-spaces\ begrenzten\ String,\ der\ die\r\n\ Zeichenfolgen\ "true,\ True,\ T,\ t,\ false,\ False,\ F,\ f"\ enthalten\ darf\ von\r\n\ der\ Standardeingabe\ ein.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ wird\ hinter\ das\ EOLN\ der\ aktuellen\ Zeile\ gestellt,\r\n\ d.h.\ der\ Rest\ der\ Eingabezeile\ wird\ ueberlesen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @return\ den\ eingelesenen\ Boolean-Wert\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEIN\ Booleanwert\ wir\ True\ ||\ true\ ||\ T\ ||\ t\ ||\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ False\ ||\ false\ ||\ F\ ||\ f\ ist.\r\n
comment31.params=prompt
comment31.target=boolean\ readlnBoolean(java.lang.String)
comment31.text=\r\n\ <UL>\r\n\ <LI>\ gibt\ den\ Eingabe-Aufforderungs-String\ <CODE>prompt</CODE>\ aus\ und\r\n\ liest\ danach\ einen\ von\ white-spaces\ begrenzten\ String,\ der\ die\r\n\ Zeichenfolgen\ "true,\ True,\ T,\ t,\ false,\ False,\ F,\ f"\ enthalten\ darf\ von\r\n\ der\ Standardeingabe\ ein.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ wird\ hinter\ das\ EOLN\ der\ aktuellen\ Zeile\ gestellt,\r\n\ d.h.\ der\ Rest\ der\ Eingabezeile\ wird\ ueberlesen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @param\ prompt\r\n\ \ \ \ \ \ \ \ \ \ \ \ ist\ der\ Eingabe-Aufforderungs-String\r\n\ @return\ den\ eingelesenen\ Boolean-Wert\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEIN\ Booleanwert\ wir\ True||\ true\ ||\ T\ ||\ t\ ||\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ False\ ||\ false\ ||\ F\ ||\ f\ ist.\r\n
comment32.params=
comment32.target=char\ readChar()
comment32.text=\r\n\ <UL>\r\n\ <LI>\ liest\ ein\ von\ white-spaces\ begrenztes\ Zeichen\ von\ der\r\n\ Standardeingabe\ ein.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ bleibt\ hinter\ dem\ eingelesenen\ Zeichen\ in\ der\r\n\ aktuellen\ Zeile\ stehen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @return\ das\ eingelesene\ Zeichen\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEIN\ durch\ white-spaces\ begrenztes\ Zeichen\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ eingegeben\ wurde\r\n
comment33.params=prompt
comment33.target=char\ readChar(java.lang.String)
comment33.text=\r\n\ <UL>\r\n\ <LI>\ gibt\ den\ Eingabe-Aufforderungs-String\ <CODE>prompt</CODE>\ aus\ und\r\n\ liest\ danach\ ein\ von\ white-spaces\ begrenztes\ Zeichen\ von\ der\r\n\ Standardeingabe\ ein.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ bleibt\ hinter\ dem\ eingelesenen\ Zeichen\ in\ der\r\n\ aktuellen\ Zeile\ stehen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @param\ prompt\r\n\ \ \ \ \ \ \ \ \ \ \ \ ist\ der\ Eingabe-Aufforderungs-String\r\n\ @return\ das\ eingelesene\ Zeichen\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEIN\ durch\ white-spaces\ begrenztes\ Zeichen\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ eingegeben\ wurde\r\n
comment34.params=
comment34.target=char\ readlnChar()
comment34.text=\r\n\ <UL>\r\n\ <LI>\ liest\ ein\ von\ white-spaces\ begrenztes\ Zeichen\ von\ der\r\n\ Standardeingabe\ ein.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ wird\ hinter\ das\ EOLN\ der\ aktuellen\ Zeile\ gestellt,\r\n\ d.h.\ der\ Rest\ der\ Eingabezeile\ wird\ ueberlesen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @return\ das\ eingelesene\ Zeichen\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEIN\ durch\ white-spaces\ begrenztes\ Zeichen\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ eingegeben\ wurde\r\n
comment35.params=prompt
comment35.target=char\ readlnChar(java.lang.String)
comment35.text=\r\n\ <UL>\r\n\ <LI>\ gibt\ den\ Eingabe-Aufforderungs-String\ <CODE>prompt</CODE>\ aus\ und\r\n\ liest\ danach\ ein\ von\ white-spaces\ begrenztes\ Zeichen\ von\ der\r\n\ Standardeingabe\ ein.\r\n\ <LI>\ der\ Lesezeiger\ wird\ hinter\ das\ EOLN\ der\ aktuellen\ Zeile\ gestellt,\r\n\ d.h.\ der\ Rest\ der\ Eingabezeile\ wird\ ueberlesen.\r\n\ </UL>\r\n\ \r\n\ @param\ prompt\r\n\ \ \ \ \ \ \ \ \ \ \ \ ist\ der\ Eingabe-Aufforderungs-String\r\n\ @return\ das\ eingelesene\ Zeichen\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEIN\ durch\ white-spaces\ begrenztes\ Zeichen\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ eingegeben\ wurde\r\n
comment36.params=prompt
comment36.target=void\ printPrompt(java.lang.String)
comment36.text=\r\n\ Umschalten\ auf\ das\ Lesen\ einer\ Datei\r\n\ \r\n\ @param\ in\ Dateiname\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ falls\ Datei\ nicht\ vorhanden\r\n
comment37.params=
comment37.target=void\ checkEOF()
comment4.params=
comment4.target=double\ readDouble()
comment4.text=\r\n\ <UL>\r\n\ <LI>\ liest\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ double-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ bleibt\ hinter\ den\ eingelesenen\ Zeichen\ in\ der\r\n\ aktuellen\ Zeile\ stehen.\r\n\ </UL>\r\n\ \r\n\ @return\ die\ eingelesene\ Double-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
comment5.params=prompt
comment5.target=double\ readDouble(java.lang.String)
comment5.text=\r\n\ <UL>\r\n\ <LI>\ gibt\ den\ Eingabe-Aufforderungs-String\ <CODE>prompt</CODE>\ aus\ und\r\n\ liest\ danach\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ double-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ bleibt\ hinter\ den\ eingelesenen\ Zeichen\ in\ der\r\n\ aktuellen\ Zeile\ stehen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @param\ prompt\r\n\ \ \ \ \ \ \ \ \ \ \ \ ist\ der\ Eingabe-Aufforderungs-String\r\n\ @return\ die\ eingelesene\ Double-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
comment6.params=
comment6.target=double\ readlnDouble()
comment6.text=\r\n\ <UL>\r\n\ <LI>\ liest\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ double-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ wird\ hinter\ das\ EOLN\ der\ aktuellen\ Zeile\ gestellt,\r\n\ d.h.\ der\ Rest\ der\ Eingabezeile\ wird\ ueberlesen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @return\ die\ eingelesene\ Double-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
comment7.params=prompt
comment7.target=double\ readlnDouble(java.lang.String)
comment7.text=\r\n\ <UL>\r\n\ <LI>\ gibt\ den\ Eingabe-Aufforderungs-String\ <CODE>prompt</CODE>\ aus\ und\r\n\ liest\ danach\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ double-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ wird\ hinter\ das\ EOLN\ der\ aktuellen\ Zeile\ gestellt,\r\n\ d.h.\ der\ Rest\ der\ Eingabezeile\ wird\ ueberlesen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @param\ prompt\r\n\ \ \ \ \ \ \ \ \ \ \ \ ist\ der\ Eingabe-Aufforderungs-String\r\n\ @return\ die\ eingelesene\ Double-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
comment8.params=
comment8.target=byte\ readByte()
comment8.text=\r\n\ <UL>\r\n\ <LI>\ liest\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ byte-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ bleibt\ hinter\ den\ eingelesenen\ Zeichen\ in\ der\r\n\ aktuellen\ Zeile\ stehen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @return\ die\ eingelesene\ Byte-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
comment9.params=prompt
comment9.target=byte\ readByte(java.lang.String)
comment9.text=\r\n\ <UL>\r\n\ <LI>\ gibt\ den\ Eingabe-Aufforderungs-String\ <CODE>prompt</CODE>\ aus\ und\r\n\ liest\ danach\ einen\ von\ white-spaces\ begrenzten\ String\ von\ der\r\n\ Standardeingabe\ ein\ und\ wandelt\ ihn\ in\ eine\ byte-Zahl\ um.\r\n\ \r\n\ <LI>\ der\ Lesezeiger\ bleibt\ hinter\ den\ eingelesenen\ Zeichen\ in\ der\r\n\ aktuellen\ Zeile\ stehen.\r\n\ \r\n\ </UL>\r\n\ \r\n\ @param\ prompt\r\n\ \ \ \ \ \ \ \ \ \ \ \ ist\ der\ Eingabe-Aufforderungs-String\r\n\ @return\ die\ eingelesene\ Byte-Zahl\r\n\ @exception\ StdinException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ falls\ Eingabe\ KEINE\ Zahl\ oder\ ausserhalb\ des\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Wertebereiches\r\n
numComments=38
